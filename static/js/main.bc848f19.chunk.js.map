{"version":3,"sources":["components/Header.jsx","BLL/history_reducer.js","components/Currency.jsx","components/Currency_Container.js","utils/validator.js","components/Input_Field.jsx","components/Select_Field.jsx","components/Add.jsx","BLL/total_reducer.js","components/Add_Container.js","components/List.jsx","components/List_Container.js","components/Clear.jsx","components/CLear_Container.js","components/Total.jsx","components/Total_Container.js","components/Controls.jsx","components/Display.jsx","components/Display_Container.js","App.js","serviceWorker.js","BLL/currency_reducer.js","API/currencies.js","BLL/store.js","index.js"],"names":["Header","className","initialState","history_reducer","state","action","type","date","goodsName","amount","currency","result","Object","keys","sort","forEach","item","Currency","props","currenciesList","map","value","key","Currency_Container","connect","currencies","validate","values","errors","Input_Field","input","meta","touched","error","Select_Field","AddReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","Add","addNote","add","reset","clear","collection","total","total_reducer","push","i","Math","round","from","Add_Container","List","onClick","list","List_Container","ClerFormRedux","Clear","clearNote","Clear_Container","TotalReduxForm","Total","converter","Total_Container","dispatch","getCarrencies","then","data","rates","Controls","Display","history","arr","entries","elem","random","Display_Container","App","Boolean","window","location","hostname","match","initilstate","CURRENCIES","currency_reducer","reducers","combineReducers","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bc848f19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>\r\n          Manage your expenses!\r\n        </h1>\r\n      </header>\r\n    )\r\n  }\r\n  \r\n  export default Header;","const initialState = {\r\n  // \"9999-12-23\": [\r\n  //   {\r\n  //     goodsName: \"Banana\",\r\n  //     amount: 100,\r\n  //     currency: \"PLN\"\r\n  //   }\r\n  // ],\r\n};\r\n\r\nconst ADD_NOTE = \"ADD_NOTE-NOTE\";\r\nconst LIST =\"LIST\";\r\nconst CLEAR = \"CLEAR\";\r\n\r\nconst history_reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_NOTE:\r\n      if (state[action.date]) {\r\n        state[action.date] = [\r\n          ...state[action.date],\r\n          {\r\n            goodsName: action.goodsName,\r\n            amount: action.amount,\r\n            currency: action.currency\r\n          }\r\n        ]\r\n      } else {\r\n        state[action.date] = [\r\n          {\r\n            goodsName: action.goodsName,\r\n            amount: action.amount,\r\n            currency: action.currency\r\n          }\r\n        ]\r\n      }\r\n      return {...state};\r\n    \r\n    case LIST:\r\n      const result = {};\r\n      Object.keys(state)\r\n      .sort()\r\n      .forEach(item => {result[item] = state[item]});\r\n      return result;\r\n\r\n    case CLEAR:\r\n      delete state[action.date];\r\n      return {...state};\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const addNote = (date, amount, currency, goodsName) => (\r\n{type: ADD_NOTE, date, amount, currency, goodsName}\r\n);\r\nexport const list = () => ({type: LIST});\r\nexport const clearNote = (date) => ({type: CLEAR, date});\r\n \r\nexport default history_reducer;","import React from 'react';\r\n\r\nconst Currency = (props) => (\r\n  props.currenciesList.map(item => <option value={item} key={item}>{item}</option>)\r\n);\r\n\r\nexport default Currency;","import Currency from './Currency';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currenciesList: state.currencies.currencies \r\n  }\r\n}\r\n\r\nconst Currency_Container = connect(mapStateToProps)(Currency);\r\n\r\nexport default Currency_Container;","const validate = values => {\r\n  const errors = {}\r\n  \r\n    if (!values.date) {\r\n      errors.date = 'Field is required';\r\n    } \r\n    \r\n    if (!values.amount) {\r\n      errors.amount = 'Field is required';\r\n    } else if (values.amount < 1) {\r\n      errors.amount = 'The number must be positive';\r\n    }\r\n    \r\n    if (!values.currency) {\r\n      errors.currency = 'Field is required';\r\n    } \r\n    \r\n    if (!values.goodsName) {\r\n      errors.goodsName = 'Field is required';\r\n    }\r\n\r\n  return errors;\r\n}\r\nexport default validate;","import React from 'react';\r\n\r\nconst Input_Field = ({ input, type, meta: { touched, error } }) => {\r\n\r\n  return (\r\n    <>\r\n      <input {...input} type={type} />\r\n      <br />\r\n      {touched && error && <span className=\"renderField\">{error}</span>}\r\n    </>\r\n  )\r\n} \r\n\r\nexport default Input_Field;","import React from 'react';\r\n\r\nconst Select_Field = ({ input, meta: { touched, error }, ...props }) => {\r\n  \r\n  return (\r\n    <>\r\n      <select {...input} {...props} />\r\n      <br />\r\n      {touched && error && <span className=\"renderField\">{error}</span>}\r\n    </>\r\n  )\r\n} \r\n\r\nexport default Select_Field;","import React from 'react';\r\nimport { reduxForm, Field} from 'redux-form';\r\nimport Currency_Container from './Currency_Container';\r\nimport validate from '../utils/validator';\r\nimport Input_Field from './Input_Field';\r\nimport Select_Field from './Select_Field';\r\n\r\nconst AddForm = (props) => {\r\n  \r\n  return (\r\n    <form className=\"form add\" onSubmit={props.handleSubmit}>\r\n      <button className = \"button\">Add</button>\r\n      <fieldset className=\"fieldset\">\r\n        <legend>Date</legend>\r\n        <Field component={Input_Field} name=\"date\" type=\"date\" />\r\n      </fieldset>\r\n      <fieldset className=\"fieldset\">\r\n        <legend>Amount</legend>\r\n        <Field component={Input_Field} name=\"amount\" type=\"number\" />\r\n      </fieldset>\r\n      <fieldset className=\"fieldset\">\r\n        <legend>Currency</legend>\r\n        <Field component={Select_Field} name=\"currency\">\r\n          <option></option>\r\n          <Currency_Container />\r\n        </Field>\r\n      </fieldset>\r\n      <fieldset className=\"fieldset\">\r\n        <legend>Name</legend>\r\n        <Field component={Input_Field} name=\"goodsName\" type=\"text\" />\r\n      </fieldset>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddReduxForm = reduxForm({form: \"add\", validate})(AddForm);\r\n\r\nconst Add = (props) => {\r\n  const onSubmit = ({ date, amount, currency, goodsName }) => {\r\n    props.addNote(date, amount, currency, goodsName);\r\n    props.add(amount, currency);\r\n    props.reset('add');\r\n    props.clear();\r\n  }\r\n  \r\n  return (\r\n    <AddReduxForm onSubmit={onSubmit}/>\r\n  );\r\n}\r\n\r\nexport default Add;","import { getCarrencies } from '../API/API';\r\n\r\nconst initialState = {\r\n  collection: [],\r\n  total: {\r\n    amount: null,\r\n    currency: null\r\n  }\r\n}\r\n\r\nconst ADD = \"ADD\";\r\nconst TOTAL = \"TOTAL\";\r\nconst CLEAR = \"CLEAR\";\r\n\r\nconst total_reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD:\r\n      state.collection.push([+action.amount, action.currency]);\r\n      return {...state}\r\n\r\n    case TOTAL:\r\n      if(action.i === 0) {\r\n        state.total.amount = 0;\r\n      } \r\n      state.total.amount += Math.round(((1 / action.from) * action.amount * 100)) / 100;\r\n      state.total.currency = action.currency;\r\n      return {...state}\r\n\r\n    case CLEAR:\r\n      state.total.amount = null;\r\n      state.total.currency = null;\r\n      return {...state}\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const add = (amount, currency) => ({type: ADD, amount, currency});\r\nexport const total = (from, amount, currency, i) => ({type: TOTAL, from, amount, currency, i});\r\nexport const clear = () => ({type: CLEAR});\r\nexport default total_reducer;\r\n\r\nexport const converter= (collection, currency) => {\r\n  return (dispatch) => {\r\n    getCarrencies().then(data => {\r\n      collection.forEach((item, i) => {\r\n        dispatch(total(data.rates[item[1]], item[0], currency, i));\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import { addNote } from '../BLL/history_reducer';\r\nimport { connect } from \"react-redux\"\r\nimport Add from \"./Add\"\r\nimport { add, clear } from '../BLL/total_reducer';\r\nimport { reset } from 'redux-form';\r\n\r\nconst mapStateToProps = () => {\r\n  return {}\r\n}\r\n\r\nconst Add_Container = connect(mapStateToProps, {addNote, add, clear, reset})(Add)\r\n\r\nexport default Add_Container;","import React from 'react';\r\n\r\nconst List = (props) => {\r\n  const onSubmit = () => {\r\n    props.list(); \r\n    props.clear();\r\n  }\r\n  \r\n  return (\r\n    <div className=\"list\">\r\n      <button className = \"button\" onClick = {onSubmit}>List</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List;","import { connect } from \"react-redux\";\r\nimport { list } from '../BLL/history_reducer';\r\nimport { clear } from '../BLL/total_reducer';\r\nimport List from './List';\r\n\r\nconst mapStateToProps = () => {\r\n  return {}\r\n}\r\n\r\nconst List_Container = connect(mapStateToProps, {list, clear})(List);\r\n\r\nexport default List_Container;","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport Input_Field from './Input_Field';\r\nimport validate from '../utils/validator';\r\n\r\nconst ClearForm = (props) => {\r\n  return (\r\n    <form className=\"form\" onSubmit={props.handleSubmit}>\r\n      <button className = \"button\">Clear</button>\r\n      <fieldset className='fieldset'>\r\n        <legend>Date</legend>\r\n        <Field component={Input_Field} type=\"date\" name=\"date\" />\r\n      </fieldset>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ClerFormRedux = reduxForm({form: \"clear\", validate})(ClearForm);\r\n\r\nconst Clear = (props) => {\r\n  const onSubmit = ({ date }) => {\r\n    props.clearNote(date);\r\n    props.reset(\"clear\");\r\n    props.clear();\r\n  }\r\n  return (\r\n    <ClerFormRedux onSubmit={onSubmit} />\r\n  )\r\n}\r\n\r\nexport default Clear;","import { clearNote } from \"../BLL/history_reducer\";\r\nimport { clear } from \"../BLL/total_reducer\";\r\nimport Clear from \"./Clear\";\r\nimport { reset } from 'redux-form';\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = () => {\r\n  return {}\r\n}\r\n\r\nconst Clear_Container = connect(mapStateToProps, {clearNote, clear, reset})(Clear);\r\n\r\nexport default Clear_Container;","import React from 'react';\r\nimport Currency_Container from './Currency_Container';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport Select_Field from './Select_Field';\r\nimport validate from '../utils/validator';\r\n\r\nconst TotalForm = (props) => {\r\n  return (\r\n    <form className = \"form\" onSubmit={props.handleSubmit}>\r\n      <button className=\"button\">Total</button>\r\n      <fieldset className='fieldset'>\r\n        <legend>Currency</legend>\r\n        <Field component={Select_Field} name=\"currency\">\r\n          <option></option>\r\n          <Currency_Container />\r\n        </Field>\r\n      </fieldset>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst TotalReduxForm = reduxForm({form: \"total\", validate})(TotalForm);\r\n\r\nconst Total = (props) => {\r\n  const onSubmit = ({ currency }) => {\r\n    props.converter(props.collection, currency, props.amount);\r\n    props.reset(\"total\");\r\n  }\r\n  return (\r\n    <TotalReduxForm onSubmit={onSubmit} />\r\n  )\r\n}\r\n\r\nexport default Total;","import { converter } from \"../BLL/total_reducer\"\r\nimport { connect } from \"react-redux\"\r\nimport Total from \"./Total\"\r\nimport { reset } from 'redux-form';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    collection: state.total.collection\r\n  }\r\n}\r\n\r\nconst Total_Container = connect(mapStateToProps, {converter, reset})(Total);\r\n\r\nexport default Total_Container;","import React from 'react';\r\nimport Add_Container from './Add_Container';\r\nimport List_Container from './List_Container';\r\nimport Clear_Container from './CLear_Container';\r\nimport Total_Container from './Total_Container';\r\n\r\nconst Controls = () => {\r\n  return (\r\n    <>\r\n      <Add_Container />\r\n      <List_Container />\r\n      <Clear_Container />\r\n      <Total_Container />\r\n    </>\r\n  )\r\n}\r\n  \r\nexport default Controls;","import React from 'react';\r\n\r\nconst Display = ({ history, total }) => {\r\n  let arr = Object.entries(history);\r\n    return  (\r\n      <section>\r\n        {arr.map((item, i) => {\r\n          return (\r\n            <div key={i}>\r\n              {item[0]}\r\n              {item[1].map(elem => \r\n                <div key={i + Math.random()}>\r\n                  {elem.goodsName}&nbsp;\r\n                  {elem.amount}&nbsp;\r\n                  {elem.currency}\r\n                </div>\r\n              )}\r\n            </div>    \r\n          )\r\n        })}\r\n        <br />\r\n        <div>\r\n          {total.total.amount}&nbsp;\r\n          {total.total.currency}\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Display;","import { connect } from 'react-redux';\r\nimport Display from './Display';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    history: state.history,\r\n    total: state.total\r\n  }\r\n}\r\n\r\nconst Display_Container = connect(mapStateToProps)(Display);\r\n\r\nexport default Display_Container;","import React from 'react';\r\nimport './App.scss';\r\nimport Header from './components/Header';\r\nimport Controls from './components/Controls';\r\nimport Display_Container from './components/Display_Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Controls />\r\n      <Display_Container />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { currenciesNames } from \"../API/currencies\";\r\n\r\nconst initilstate = {\r\n  currencies: currenciesNames,\r\n}\r\n\r\nconst CURRENCIES = \"currency_reducer/CURRENCIES\";\r\n\r\nconst currency_reducer = (state = initilstate, action) => {\r\n  switch (action.type) {\r\n    case CURRENCIES:\r\n      state.currencies = action.currencies;\r\n      return {...state};\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const currencies = (currencies) => ({type:CURRENCIES, currencies});\r\n\r\n// export const setCurrencies = () => async (dispatch) => {\r\n//   const responce = await getCarrencies();\r\n//   responce.then(data => dispatch(currencies(Object.keys(data.rates))));\r\n// }\r\n\r\nexport default currency_reducer;","export const currenciesNames = [\r\n    \"AED\", \"AFN\", \"ALL\", \"AMD\", \"ANG\", \"AOA\", \"ARS\", \"AUD\", \"AWG\", \"AZN\", \"BAM\", \"BBD\", \"BDT\", \"BGN\", \r\n    \"BHD\", \"BIF\", \"BMD\", \"BND\", \"BOB\", \"BOV\", \"BRL\", \"BSD\", \"BTN\", \"BWP\", \"BYR\", \"BZD\", \"CAD\", \"CDF\", \r\n    \"CHE\", \"CHF\", \"CHW\", \"CLF\", \"CLP\", \"CNY\", \"COP\", \"COU\", \"CRC\", \"CUC\", \"CUP\", \"CVE\", \"CZK\", \"DJF\", \r\n    \"DKK\", \"DOP\", \"DZD\", \"EGP\", \"ERN\", \"ETB\", \"EUR\", \"FJD\", \"FKP\", \"GBP\", \"GEL\", \"GHS\", \"GIP\", \"GMD\", \r\n    \"GNF\", \"GTQ\", \"GYD\", \"HKD\", \"HNL\", \"HRK\", \"HTG\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"IQD\", \"IRR\", \"ISK\", \r\n    \"JMD\", \"JOD\", \"JPY\", \"KES\", \"KGS\", \"KHR\", \"KMF\", \"KPW\", \"KWD\", \"KYD\", \"KZT\", \"LAK\", \"LBP\", \"LKR\", \r\n    \"LRD\", \"LSL\", \"LYD\", \"MAD\", \"MDL\", \"MGA\", \"MKD\", \"MMK\", \"MNT\", \"MOP\", \"MRO\", \"MUR\", \"MVR\", \"MWK\", \r\n    \"MXN\", \"MXV\", \"MYR\", \"MZN\", \"NAD\", \"NGN\", \"NIO\", \"NOK\", \"NPR\", \"NZD\", \"OMR\", \"PAB\", \"PEN\", \"PGK\", \r\n    \"PHP\", \"PKR\", \"PLN\", \"PYG\", \"QAR\", \"RON\", \"RSD\", \"RUB\", \"RWF\", \"SAR\", \"SBD\", \"SCR\", \"SDG\", \"SEK\", \r\n    \"SGD\", \"SHP\", \"SLL\", \"SOS\", \"SRD\", \"SSP\", \"STD\", \"SVC\", \"SYP\", \"SZL\", \"THB\", \"TJS\", \"TMT\", \"TND\", \r\n    \"TOP\", \"TRY\", \"TTD\", \"TWD\", \"TZS\", \"UAH\", \"UGX\", \"USD\", \"USN\", \"UYI\", \"UYU\", \"UZS\", \"VEF\", \"VND\", \r\n    \"VUV\", \"WST\", \"XAF\", \"XCD\", \"XDR\", \"XOF\", \"XPF\", \"XSU\", \"XUA\", \"YER\", \"ZAR\", \"ZMW\", \"ZWL\"\r\n  ]","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport history_reducer from \"./history_reducer\";\r\nimport total_reducer from \"./total_reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport currency_reducer from \"./currency_reducer\";\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nlet reducers = combineReducers({\r\n  form: formReducer,\r\n  history: history_reducer,\r\n  total: total_reducer,\r\n  currencies: currency_reducer\r\n})\r\n\r\nlet store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './BLL/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
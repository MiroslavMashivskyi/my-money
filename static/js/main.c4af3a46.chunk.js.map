{"version":3,"sources":["components/Header.jsx","BLL/history_reducer.js","components/Currency.jsx","API/API.js","BLL/currency_reducer.js","components/Currency_Container.js","utils/validator.js","components/Input_Field.jsx","components/Select_Field.jsx","components/Add.jsx","BLL/total_reducer.js","components/Add_Container.js","components/List.jsx","components/List_Container.js","components/Clear.jsx","components/CLear_Container.js","components/Total.jsx","components/Total_Container.js","components/Controls.jsx","components/Display.jsx","components/Display_Container.js","App.js","serviceWorker.js","BLL/store.js","index.js"],"names":["Header","className","initialState","history_reducer","state","action","type","date","goodsName","amount","currency","result","Object","keys","sort","forEach","item","Currency","this","props","setCurrencies","console","log","currenciesList","length","map","value","key","Component","getCarrencies","a","axios","then","responce","data","initilstate","currencies","CURRENCIES","currency_reducer","Currency_Container","connect","dispatch","rates","validate","values","errors","Input_Field","input","meta","touched","error","Select_Field","AddReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","Add","addNote","add","reset","clear","collection","total","total_reducer","push","i","Math","round","from","Add_Container","List","onClick","list","List_Container","ClerFormRedux","Clear","clearNote","Clear_Container","TotalReduxForm","Total","converter","Total_Container","Controls","Display","history","arr","entries","elem","random","Display_Container","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c4af3a46.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n      <header className=\"header\">\n        <h1>\n          Manage your expenses!\n        </h1>\n      </header>\n    )\n  }\n  \n  export default Header;","const initialState = {\n  // \"9999-12-23\": [\n  //   {\n  //     goodsName: \"Banana\",\n  //     amount: 100,\n  //     currency: \"PLN\"\n  //   }\n  // ],\n};\n\nconst ADD_NOTE = \"ADD_NOTE-NOTE\";\nconst LIST =\"LIST\";\nconst CLEAR = \"CLEAR\";\n\nconst history_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_NOTE:\n      if (state[action.date]) {\n        state[action.date] = [\n          ...state[action.date],\n          {\n            goodsName: action.goodsName,\n            amount: action.amount,\n            currency: action.currency\n          }\n        ]\n      } else {\n        state[action.date] = [\n          {\n            goodsName: action.goodsName,\n            amount: action.amount,\n            currency: action.currency\n          }\n        ]\n      }\n      return {...state};\n    \n    case LIST:\n      const result = {};\n      Object.keys(state)\n      .sort()\n      .forEach(item => {result[item] = state[item]});\n      return result;\n\n    case CLEAR:\n      delete state[action.date];\n      return {...state};\n    \n    default:\n      return state;\n  }\n}\n\nexport const addNote = (date, amount, currency, goodsName) => (\n{type: ADD_NOTE, date, amount, currency, goodsName}\n);\nexport const list = () => ({type: LIST});\nexport const clearNote = (date) => ({type: CLEAR, date});\n \nexport default history_reducer;","import React, { Component } from 'react';\n\nclass Currency extends Component {\n  componentWillMount() {\n    this.props.setCurrencies();\n  }\n\n  \n  render() {\n    console.log(1111);\n    if(this.props.currenciesList.length > 0) {\n      return (this.props.currenciesList.map(item => <option value={item} key={item}>{item}</option>));\n    }\n  \n    return null;\n  }\n}\n\nexport default Currency;","import * as axios from \"axios\";\n  \nexport const getCarrencies = async () => {\n  return await axios.get(`http://data.fixer.io/api/latest?access_key=ab00cc4fd0db3123de763c9c47e14cdc`)\n  .then(responce => responce.data);\n}","import { getCarrencies } from \"../API/API\";\n\nconst initilstate = {\n  currencies: []\n}\n\nconst CURRENCIES = \"currency_reducer/CURRENCIES\";\n\nconst currency_reducer = (state = initilstate, action) => {\n  switch (action.type) {\n    case CURRENCIES:\n      state.currencies = action.currencies;\n      return {...state};\n  \n    default:\n      return state;\n  }\n}\n\nexport const currencies = (currencies) => ({type:CURRENCIES, currencies});\n\nexport const setCurrencies = () => {\n  return (dispatch) => {\n    getCarrencies().then(data => dispatch(currencies(Object.keys(data.rates))));\n  }\n}\n\nexport default currency_reducer;","import Currency from './Currency';\nimport { connect } from 'react-redux';\nimport { setCurrencies } from '../BLL/currency_reducer';\n\nconst mapStateToProps = (state) => {\n  return {\n    currenciesList: state.currencies.currencies\n  }\n}\n\nconst Currency_Container = connect(mapStateToProps, {setCurrencies})(Currency);\n\nexport default Currency_Container;","const validate = values => {\n  const errors = {}\n  \n    if (!values.date) {\n      errors.date = 'Field is required';\n    } \n    \n    if (!values.amount) {\n      errors.amount = 'Field is required';\n    } else if (values.amount < 1) {\n      errors.amount = 'The number must be positive';\n    }\n    \n    if (!values.currency) {\n      errors.currency = 'Field is required';\n    } \n    \n    if (!values.goodsName) {\n      errors.goodsName = 'Field is required';\n    }\n\n  return errors;\n}\nexport default validate;","import React from 'react';\n\nconst Input_Field = ({ input, type, meta: { touched, error } }) => {\n\n  return (\n    <>\n      <input {...input} type={type} />\n      <br />\n      {touched && error && <span className=\"renderField\">{error}</span>}\n    </>\n  )\n} \n\nexport default Input_Field;","import React from 'react';\n\nconst Select_Field = ({ input, meta: { touched, error }, ...props }) => {\n  \n  return (\n    <>\n      <select {...input} {...props} />\n      <br />\n      {touched && error && <span className=\"renderField\">{error}</span>}\n    </>\n  )\n} \n\nexport default Select_Field;","import React from 'react';\nimport { reduxForm, Field} from 'redux-form';\nimport Currency_Container from './Currency_Container';\nimport validate from '../utils/validator';\nimport Input_Field from './Input_Field';\nimport Select_Field from './Select_Field';\n\nconst AddForm = (props) => {\n  \n  return (\n    <form className=\"form add\" onSubmit={props.handleSubmit}>\n      <button className = \"button\">Add</button>\n      <fieldset className=\"fieldset\">\n        <legend>Date</legend>\n        <Field component={Input_Field} name=\"date\" type=\"date\" />\n      </fieldset>\n      <fieldset className=\"fieldset\">\n        <legend>Amount</legend>\n        <Field component={Input_Field} name=\"amount\" type=\"number\" />\n      </fieldset>\n      <fieldset className=\"fieldset\">\n        <legend>Currency</legend>\n        <Field component={Select_Field} name=\"currency\">\n          <option></option>\n          <Currency_Container />\n        </Field>\n      </fieldset>\n      <fieldset className=\"fieldset\">\n        <legend>Name</legend>\n        <Field component={Input_Field} name=\"goodsName\" type=\"text\" />\n      </fieldset>\n    </form>\n  )\n}\n\nconst AddReduxForm = reduxForm({form: \"add\", validate})(AddForm);\n\nconst Add = (props) => {\n  const onSubmit = ({ date, amount, currency, goodsName }) => {\n    props.addNote(date, amount, currency, goodsName);\n    props.add(amount, currency);\n    props.reset('add');\n    props.clear();\n  }\n  \n  return (\n    <AddReduxForm onSubmit={onSubmit}/>\n  );\n}\n\nexport default Add;","import { getCarrencies } from '../API/API';\n\nconst initialState = {\n  collection: [],\n  total: {\n    amount: null,\n    currency: null\n  }\n}\n\nconst ADD = \"ADD\";\nconst TOTAL = \"TOTAL\";\nconst CLEAR = \"CLEAR\";\n\nconst total_reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD:\n      state.collection.push([+action.amount, action.currency]);\n      return {...state}\n\n    case TOTAL:\n      if(action.i === 0) {\n        state.total.amount = 0;\n      } \n      state.total.amount += Math.round(((1 / action.from) * action.amount * 100)) / 100;\n      state.total.currency = action.currency;\n      return {...state}\n\n    case CLEAR:\n      state.total.amount = null;\n      state.total.currency = null;\n      return {...state}\n\n    default:\n      return state;\n  }\n}\n\nexport const add = (amount, currency) => ({type: ADD, amount, currency});\nexport const total = (from, amount, currency, i) => ({type: TOTAL, from, amount, currency, i});\nexport const clear = () => ({type: CLEAR});\nexport default total_reducer;\n\nexport const converter= (collection, currency) => {\n  return (dispatch) => {\n    getCarrencies().then(data => {\n      collection.forEach((item, i) => {\n        dispatch(total(data.rates[item[1]], item[0], currency, i));\n      });\n    });\n  }\n}\n\n\n","import { addNote } from '../BLL/history_reducer';\nimport { connect } from \"react-redux\"\nimport Add from \"./Add\"\nimport { add, clear } from '../BLL/total_reducer';\nimport { reset } from 'redux-form';\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst Add_Container = connect(mapStateToProps, {addNote, add, clear, reset})(Add)\n\nexport default Add_Container;","import React from 'react';\n\nconst List = (props) => {\n  const onSubmit = () => {\n    props.list(); \n    props.clear();\n  }\n  \n  return (\n    <div className=\"list\">\n      <button className = \"button\" onClick = {onSubmit}>List</button>\n    </div>\n  )\n}\n\nexport default List;","import { connect } from \"react-redux\";\nimport { list } from '../BLL/history_reducer';\nimport { clear } from '../BLL/total_reducer';\nimport List from './List';\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst List_Container = connect(mapStateToProps, {list, clear})(List);\n\nexport default List_Container;","import React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport Input_Field from './Input_Field';\nimport validate from '../utils/validator';\n\nconst ClearForm = (props) => {\n  return (\n    <form className=\"form\" onSubmit={props.handleSubmit}>\n      <button className = \"button\">Clear</button>\n      <fieldset className='fieldset'>\n        <legend>Date</legend>\n        <Field component={Input_Field} type=\"date\" name=\"date\" />\n      </fieldset>\n    </form>\n  )\n}\n\nconst ClerFormRedux = reduxForm({form: \"clear\", validate})(ClearForm);\n\nconst Clear = (props) => {\n  const onSubmit = ({ date }) => {\n    props.clearNote(date);\n    props.reset(\"clear\");\n    props.clear();\n  }\n  return (\n    <ClerFormRedux onSubmit={onSubmit} />\n  )\n}\n\nexport default Clear;","import { clearNote } from \"../BLL/history_reducer\";\nimport { clear } from \"../BLL/total_reducer\";\nimport Clear from \"./Clear\";\nimport { reset } from 'redux-form';\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = () => {\n  return {}\n}\n\nconst Clear_Container = connect(mapStateToProps, {clearNote, clear, reset})(Clear);\n\nexport default Clear_Container;","import React from 'react';\nimport Currency_Container from './Currency_Container';\nimport { Field, reduxForm } from 'redux-form';\nimport Select_Field from './Select_Field';\nimport validate from '../utils/validator';\n\nconst TotalForm = (props) => {\n  return (\n    <form className = \"form\" onSubmit={props.handleSubmit}>\n      <button className=\"button\">Total</button>\n      <fieldset className='fieldset'>\n        <legend>Currency</legend>\n        <Field component={Select_Field} name=\"currency\">\n          <option></option>\n          <Currency_Container />\n        </Field>\n      </fieldset>\n    </form>\n  )\n}\n\nconst TotalReduxForm = reduxForm({form: \"total\", validate})(TotalForm);\n\nconst Total = (props) => {\n  const onSubmit = ({ currency }) => {\n    props.converter(props.collection, currency, props.amount);\n    props.reset(\"total\");\n  }\n  return (\n    <TotalReduxForm onSubmit={onSubmit} />\n  )\n}\n\nexport default Total;","import { converter } from \"../BLL/total_reducer\"\nimport { connect } from \"react-redux\"\nimport Total from \"./Total\"\nimport { reset } from 'redux-form';\n\nconst mapStateToProps = (state) => {\n  return {\n    collection: state.total.collection\n  }\n}\n\nconst Total_Container = connect(mapStateToProps, {converter, reset})(Total);\n\nexport default Total_Container;","import React from 'react';\nimport Add_Container from './Add_Container';\nimport List_Container from './List_Container';\nimport Clear_Container from './CLear_Container';\nimport Total_Container from './Total_Container';\n\nconst Controls = () => {\n  return (\n    <>\n      <Add_Container />\n      <List_Container />\n      <Clear_Container />\n      <Total_Container />\n    </>\n  )\n}\n  \nexport default Controls;","import React from 'react';\n\nconst Display = ({ history, total }) => {\n  let arr = Object.entries(history);\n    return  (\n      <section>\n        {arr.map((item, i) => {\n          return (\n            <div key={i}>\n              {item[0]}\n              {item[1].map(elem => \n                <div key={i + Math.random()}>\n                  {elem.goodsName}&nbsp;\n                  {elem.amount}&nbsp;\n                  {elem.currency}\n                </div>\n              )}\n            </div>    \n          )\n        })}\n        <br />\n        <div>\n          {total.total.amount}&nbsp;\n          {total.total.currency}\n        </div>\n      </section>\n    )\n}\n\nexport default Display;","import { connect } from 'react-redux';\nimport Display from './Display';\n\nconst mapStateToProps = (state) => {\n  return {\n    history: state.history,\n    total: state.total\n  }\n}\n\nconst Display_Container = connect(mapStateToProps)(Display);\n\nexport default Display_Container;","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Controls from './components/Controls';\nimport Display_Container from './components/Display_Container';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Controls />\n      <Display_Container />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\nimport history_reducer from \"./history_reducer\";\nimport total_reducer from \"./total_reducer\";\nimport thunk from \"redux-thunk\";\nimport currency_reducer from \"./currency_reducer\";\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nlet reducers = combineReducers({\n  form: formReducer,\n  history: history_reducer,\n  total: total_reducer,\n  currencies: currency_reducer\n})\n\nlet store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk)));\n\nwindow.store = store;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './BLL/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}